cim$1. feladat
leiras$Egy baráti társaság 2 csapatra felosztva játszottak egymás ellen. A feladatod, hogy írj AWK szkriptet, amely a paraméterként kapott fájlban összeadja az A csapat pontszámait és kiírja a képernyőre. Az A csapat tagjait a nevük alapján a következő szerint ismerheted fel:<br><ul><li>Egy nagybetűvel kezdődik</li><li>Utána minimum 5 és maximum 17 kis- vagy nagybetű szerepel</li><li>Ezt egy '.' karakter követi</li><li>Végül pedig pontosan 4 darab számjegy, melyek egyike sem lehet 3 vagy 7</li><li>Csak az angol abc betűire kell számítanod</li></ul>Mindenki akire illeszkedik ez a minta az az A csapatban játszott. A bemeneti fájlban ';' karakterrel vannak egymástól elválasztva az adatok, melyek sorrendje: név, pontszám. Futtasd a programot a megadott input fájlt átadva paraméterként, és az összeget (tehát egy számot) másold be a lent található szövegdobozba.
bemeno$Az input fájlt letöltheted <a href="./awk_files/game/game.csv" target="_blank">ide kattintva</a>
valasz$228
cim$2. feladat
leiras$Írj AWK szkriptet, amely a paraméterben érkező dalszövegben megnézi és kiírja a képernyőre, hogy hányszor szerepel benne a "mama" rész szó. Ügyelj rá, hogy kezdődhet kis- és nagybetűvel is, továbbá az utolsó 'a' betű tetszőleges mennyiségben de legalább egyszer szerepel. Használj reguláris kifejezést!<br>Tehát például az alábbiakat is bele kell számolni: "Mama", "mama", "Mamaaa"...<br>A kiíratás eredményét másold be a lent látható szövegdobozba.
bemeno$Az input fájlt letöltheted <a href="./awk_files/rhapsody/rhapsody.txt" target="_blank">ide kattintva</a>
valasz$7
cim$3. feladat
leiras$A kapott inputban információk találhatóak a napról. Írj AWK szkriptet, amely a paraméterben kapott fájlból kiírja azokat a szavakat egymás után új sorba, amelyek tartalmaznak legalább egy számot és közvetlen utána egy % jelet. Tehát például a "70%", "0,1%-ot", "2%-ban" szavak megfelelnek az előbbi feltételnek. Egy szónak tekinthetsz minden szóközzel elválasztott szavat. A program a legvégén még írja ki, hogy összesen hány ilyen illeszkedést talált. Futtasd a programot a megadott input fájlt paraméterül adva, majd a program kimenetét másold be a lent található szövegdobozba.<br>Egy példa az output formátumára:<br>70%<br>81%<br>3%-ot<br>11%-ban<br>4
bemeno$Az input fájlt letöltheted <a href="./awk_files/nap/nap.txt" target="_blank">ide kattintva</a>
valasz$99,87%-a\n0,1%-ot\n70%\n28%\n2%-ban\n35%\n6
cim$4. feladat
leiras$Tamás tudni szeretné, hogy ebben az évben (2021) mely napokon tudna elég időt rászánni arra, hogy az egyik kedvenc játékával játszani tudjon. Az input fájl első sora tartalmazza a fejlécet. Az első oszlopban található a dátum az alábbi két formátumban:<br>EEEE.HH.NN<br>EEEE-HH-NN<br>Mind a kettő megfelelő formátum. A második oszlopban található, hogy ez éppen melyik napra esik, de ezeknek a napoknak egy rövidített kódolása található a sorokban, mégpedig: H:hétfő, K:kedd, SZE:szerda, CS:csütörtök, P:péntek, SZO:szombat, V:vasárnap.<br>A harmadik oszlopban található az, hogy előre láthatóan aznap a 24 órából hány órát kell eltöltenie egyéb elfoglaltságokkal. Ezek az oszlopok ';' karakterrel vannak elválasztva egymástól.<br>A feladatod megtalálni azokat a dátumokat, amelyek:<br><b>1.</b> 2021-es dátumok, a hónapra nem kell figyelned, hogy esetleg érvénytelen számú hónapot tartalmazhat mert biztosan megfelelő lesz, illetve Tamás minden 3-ra, 5-re és 7-re végződő dátumokon egészen biztosan nem szeretne játszani<br><b>2.</b>Továbbá csak kedden (K), szerdán (SZE) vagy pénteken (P) játszik, egyéb napokon biztosan nem.<br><b>3.</b>Tamás csak akkor látja értelmét játszani, ha egy nap legalább 7 óra hosszát eltud ezzel tölteni, egyéb esetben inkább el sem kezdi (ezt számold ki a 3. oszlopban található érték alapján). Továbbá felteheted, hogy Tamás nem szokott aludni, a teste megfelelően regenerálódik a játékok okozta élvezet hatására. <br>Minden ezeknek megfelelő dátumot (de csak azt, egyéb információ nem kell a sorba) írj ki a konzolra soronként, majd az utolsó sorba írd ki, hogy ez összesen hány óra játékot jelent erre az évre. Az utolsó 10 sort (1 szám a végén és 9 sor dátum) másold be a lent található szövegdobozba.
bemeno$Az input fájlt letöltheted <a href="./awk_files/wow/tamaswow.csv" target="_blank">ide kattintva</a>, egy megoldást pedig <a href="./awk_files/wow/wow.awk" target="_blank">ide kattintva.</a>
valasz$2021-11-12\n2021.11.16\n2021.11.19\n2021-11-24\n2021.11.26\n2021.11.30\n2021-12-10\n2021-12-14\n2021.12.31\n806
cim$5. feladat
leiras$Egy hosszú szorgalmi időszak után a legtöbb diáknak nem sok ereje marad a vizsgák felkészülésére. Egyesek csak azt szeretnék, hogy végre érjen véget a félév és megjelenjen a leckekönyvben az összes kurzus mellett az a csodálatos pipa. Kuba szeretné minél előbb letudni a vizsgaidőszakot, hogy megpihenjen ezen keserves félév után. Segíts hát neki és írj scriptet ami a lehetséges tantárgyakból összeállít egy sorrendet ami alapján a leggyorsabban végezhet. A csv fájl 2 oszlopot tartalmaz. Az első oszlopban van a tantárgy neve, míg a második oszlopban a dátum, melyek ';' karakterrel vannak egymástól elválasztva. Egészen biztosan nincs egy napra két különböző vizsga is hirdetve, továbbá felteheted, hogy minden vizsga egy hónapban van, így neked csak a napot kell figyelembe venned (a dátum formátuma "év.hónap.nap"). A sorrendiséget úgy kell meghatároznod, hogy minden egyes tárgyból kiválasztod a leghamarabbi időpontot és egy tömbben tárold el (amelynek indexe a tárgy neve, értéke pedig a leghamarabbi időpont legyen). Ezután ugyanebben a formátumban írd ki a konzolra az eredményt, tehát 1-1 sorban 1-1 kurzus található ';'-vel elválasztva azzal a dátummal amelyik a legkorábbi időpont. <br><b>Minta formátum:</b><br>Tantárgy1;2020.12.15<br>Tantárgy2;2020.12.14<br>
bemeno$Az input fájlt letöltheted <a href="./awk_files/kuba/awk1.csv" target="_blank">ide kattintva</a>, egy megoldást pedig <a href="./awk_files/kuba/awk1.awk" target="_blank">ide kattintva.</a>
valasz$Szkriptnyelvek;2020.12.19\nKozelito_es_szimbolikus_szamitasok;2020.12.20\nAdatbazisok;2020.12.14\nRendszerfejlesztes_I;2020.12.18\nProgramozas_II;2020.12.15
cim$6. feladat
leiras$Egy kisérlet vége felé jártok és egy nagyon titkos számítás lehetséges eredményét kell előállítanod. Mivel egy nagyon komplex feladatról van szó, ezért kémcsőben DNS számítás során bizonyos eljárások használatával végeztétek el a számításokat. Sajnos túl előre elkezdtetek örülni a sikernek így az esti buli miatt Tamás által hozott vinjak és egyéb szennyeződés keveredett a kémcsőbe. A feladatod, hogy megtaláld azokat a DNS szekvenciákat, amelyek tartalmazhatják még ígyis a megfelelő eredményt. Egy DNS szekvencia 4 lehetséges bázis sorozataként tevődik össze. Ezek a bázisok az adenin (A), guanin (G), citozin (C) és a timin (T). Ezek a bázisok egymással csak bizonyos módon tudnak kapcsolódni. Az adenin a timinnel 2 hidrogén kötés során, míg a citozin a guaninnel 3 hidrogénkötéssel (ezek egymás komplementerei). Amit biztosan tudni, hogy a lehetséges eredményt adó DNS szekvencia hossza pontosan 20 karakter hosszú. Illetve tudni, hogy az eredmény DNS szekvencia kezdő részszekvenciájának komplementere az alábbi sorozat (tehát neked a fent említett kapcsolódások alapján ennek a sorozatnak a komplementerére kell szűrnöd): "AATCGCCT". Az utolsó 4 karakter pedig biztosan ugyanazon bázisból tevődik össze (tehát lehetséges értékek: AAAA vagy TTTT vagy CCCC vagy GGGG). A köztük lévő karakterekről mindösszesen annyit tudni, hogy minden bázis duplán szerepel (tehát az első 8 karakter után, ha van egy 'A' betű akkor a következő karakternek is biztosan 'A'-nak kell lennie, a harmadik viszont lehet bármi, például 'T' de ekkor az őt követő bázisnak szintén 'T'-nek kell legyen). Egyéb tulajdonság nem ismert, az összes erre illő DNS szekvenciát írd ki a konzolra egymás után új sorban, majd másold be a végeredményt a lent található szövegdobozba.
bemeno$Az input fájlt letöltheted <a href="./awk_files/dns/awk2.txt" target="_blank">ide kattintva</a>, egy megoldást pedig <a href="./awk_files/dns/awk2.awk" target="_blank">ide kattintva.</a>
valasz$TTAGCGGAAACCGGCCTTTT\nTTAGCGGAAAGGTTCCCCCC\nTTAGCGGACCTTCCAATTTT\nTTAGCGGATTAATTAATTTT\nTTAGCGGATTAATTAACCCC\nTTAGCGGAAACCTTCCAAAA\nTTAGCGGATTAATTCCTTTT\nTTAGCGGATTAACCAACCCC
